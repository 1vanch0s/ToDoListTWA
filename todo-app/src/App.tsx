import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Route, Routes, NavLink } from "react-router-dom";
import Tasks from "./pages/Tasks";
import Rewards from "./pages/Rewards";
import Profile from "./pages/Profile";
import axios from "axios"; // –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import "./styles.css";

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
const App: React.FC = () => {
  const [coins, setCoins] = useState<number>(() => {
    const savedStats = localStorage.getItem("stats");
    return savedStats ? JSON.parse(savedStats).totalCoins || 0 : 0;
  });
  const [showRegisterPopup, setShowRegisterPopup] = useState(false);
  const [chatId, setChatId] = useState<number | null>(null);
  const [userName, setUserName] = useState<string>("");
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!localStorage.getItem("token"));
  const [user, setUser] = useState<{ id: number; username: string; email: string } | null>(null);
  const [showLoginPopup, setShowLoginPopup] = useState(false);
  const [showSignupPopup, setShowSignupPopup] = useState(false);
  const [credentials, setCredentials] = useState({ email: "", password: "", username: "" });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
  const sendLogToServer = async (message: string) => {
    const apiUrl = process.env.REACT_APP_API_URL || "undefined";
    console.log("API URL:", apiUrl); // –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
    try {
        const logUrl = `${apiUrl}/log`;
        const logBody = JSON.stringify({ message });
        await fetch(logUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: logBody,
        });
        // –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await fetch(logUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: `–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${message}` }),
        });
    } catch (err) {
        const apiUrl = process.env.REACT_APP_API_URL || "undefined";
        await fetch(`${apiUrl}/log`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: ${(err as Error).message}` }),
        }).catch(() => {});
    }
};

  useEffect(() => {
    const tg = (window as any).Telegram?.WebApp;
    if (!tg) {
      sendLogToServer("Telegram WebApp is not available");
      return;
    }
    tg.ready();
    const user = tg.initDataUnsafe.user;
    sendLogToServer(`Telegram user data: ${JSON.stringify(tg.initDataUnsafe)}`);
    if (user && user.id) {
      setChatId(user.id);
      setUserName(user.first_name + (user.last_name ? " " + user.last_name : ""));
      setAvatarUrl(user.photo_url || null);
      if (!localStorage.getItem("isRegistered")) {
        setShowRegisterPopup(true);
        sendLogToServer("–ü–æ–ø–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω");
      }
    } else {
      sendLogToServer("No user data from Telegram");
    }
  }, []);

  const registerUser = async () => {
    sendLogToServer("–§—É–Ω–∫—Ü–∏—è registerUser –≤—ã–∑–≤–∞–Ω–∞");
    if (!chatId || !userName) {
      sendLogToServer(`–û—à–∏–±–∫–∞: chatId –∏–ª–∏ userName –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, chatId: ${chatId}, userName: ${userName}`);
      return;
    }

    sendLogToServer(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId=${chatId}, username=${userName}, avatarUrl=${avatarUrl}`);
    sendLogToServer(`API URL: ${process.env.REACT_APP_API_URL}`);

    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/users`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId: chatId.toString(),
          username: userName,
          avatarUrl: avatarUrl,
        }),
      });
      const responseData = await response.json();
      if (response.ok) {
        sendLogToServer(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${JSON.stringify(responseData)}`);
        localStorage.setItem("isRegistered", "true");
        setShowRegisterPopup(false);
      } else {
        sendLogToServer(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${responseData.error || response.statusText}`);
      }
    } catch (err) {
      sendLogToServer(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${(err as Error).message}`);
    }
  };

  const handleAllowClick = () => {
    sendLogToServer("–ö–Ω–æ–ø–∫–∞ '–†–∞–∑—Ä–µ—à–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞");
    registerUser();
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_URL}/signup`, {
        username: credentials.username,
        email: credentials.email,
        password: credentials.password,
      });
      setUser(response.data);
      setShowSignupPopup(false);
      sendLogToServer(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${credentials.email}`);
    } catch (err) {
      console.error("Signup error:", err);
      sendLogToServer(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${(err as Error).message}`);
      alert("Registration failed");
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_URL}/login`, {
        email: credentials.email,
        password: credentials.password,
      });
      localStorage.setItem("token", response.data.token);
      setUser(response.data.user);
      setIsAuthenticated(true);
      setShowLoginPopup(false);
      sendLogToServer(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${credentials.email}`);
    } catch (err) {
      console.error("Login error:", err);
      sendLogToServer(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${(err as Error).message}`);
      alert("Login failed");
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
  const handleLogout = () => {
    localStorage.removeItem("token");
    setIsAuthenticated(false);
    setUser(null);
    sendLogToServer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
  };

  const updateCoins = () => {
    const savedStats = localStorage.getItem("stats");
    const totalCoins = savedStats ? JSON.parse(savedStats).totalCoins || 0 : 0;
    setCoins(totalCoins);
  };

  return (
    <Router>
      <div>
        <header className="header">
          <div className="user-info">
            {avatarUrl ? (
              <img src={avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" className="avatar-image" />
            ) : (
              <div className="avatar"></div>
            )}
            <span>{userName}</span>
            {/* –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å */}
            {user && <span> | {user.username} (Email: {user.email})</span>}
          </div>
          <div className="coins">
            <span>{coins} üí∞</span>
          </div>
          {/* –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω */}
          {isAuthenticated && <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>}
        </header>
        <nav className="nav">
          <NavLink to="/" className={({ isActive }) => (isActive ? "nav-button active" : "nav-button")}>
            –ó–∞–¥–∞—á–∏
          </NavLink>
          <NavLink to="/rewards" className={({ isActive }) => (isActive ? "nav-button active" : "nav-button")}>
            –ù–∞–≥—Ä–∞–¥—ã
          </NavLink>
          <NavLink to="/profile" className={({ isActive }) => (isActive ? "nav-button active" : "nav-button")}>
            –ü—Ä–æ—Ñ–∏–ª—å
          </NavLink>
        </nav>
        <Routes>
          <Route path="/" element={<Tasks updateCoins={updateCoins} />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/rewards" element={<Rewards updateCoins={updateCoins} />} />
        </Routes>

        {showRegisterPopup && (
          <div className="popup">
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (Telegram)</h2>
            <p>–†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏?</p>
            <p>–ò–º—è: {userName}</p>
            {avatarUrl && <img src={avatarUrl} alt="–ê–≤–∞—Ç–∞—Ä" style={{ width: "50px", height: "50px" }} />}
            <button onClick={handleAllowClick} onTouchStart={handleAllowClick} className="button primary-button">
              –†–∞–∑—Ä–µ—à–∏—Ç—å
            </button>
            <button onClick={() => setShowRegisterPopup(false)} className="button close-button">
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        )}

        {/* –ù–æ–≤—ã–π –ø–æ–ø–∞–ø –¥–ª—è –≤—Ö–æ–¥–∞ */}
        {showLoginPopup && (
          <div className="popup">
            <h2>–í—Ö–æ–¥</h2>
            <form onSubmit={handleLogin}>
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={credentials.email}
                onChange={handleInputChange}
              />
              <input
                type="password"
                name="password"
                placeholder="Password"
                value={credentials.password}
                onChange={handleInputChange}
              />
              <button type="submit" className="button primary-button">
                –í–æ–π—Ç–∏
              </button>
              <button onClick={() => setShowLoginPopup(false)} className="button close-button">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </form>
          </div>
        )}

        {/* –ù–æ–≤—ã–π –ø–æ–ø–∞–ø –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        {showSignupPopup && (
          <div className="popup">
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <form onSubmit={handleSignup}>
              <input
                type="text"
                name="username"
                placeholder="Username"
                value={credentials.username}
                onChange={handleInputChange}
              />
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={credentials.email}
                onChange={handleInputChange}
              />
              <input
                type="password"
                name="password"
                placeholder="Password"
                value={credentials.password}
                onChange={handleInputChange}
              />
              <button type="submit" className="button primary-button">
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
              <button onClick={() => setShowSignupPopup(false)} className="button close-button">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </form>
          </div>
        )}

        {/* –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–æ–≤, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω */}
        {!isAuthenticated && !showRegisterPopup && (
          <div className="auth-buttons">
            <button onClick={() => setShowLoginPopup(true)}>–í–æ–π—Ç–∏</button>
            <button onClick={() => setShowSignupPopup(true)}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
          </div>
        )}
      </div>
    </Router>
  );
};

export default App;