import { useState, useEffect, createContext, useContext } from 'react';
import Tasks from './Tasks'; // Add this import for the Tasks component


interface ProfileContextType {
  taskStats: { easy: number; medium: number; hard: number };
  globalStats: { completed: number; failed: number };
  updateTaskStats: (difficulty: 'easy' | 'medium' | 'hard') => void;
  updateGlobalStats: (result: 'completed' | 'failed') => void;
}

const ProfileContext = createContext<ProfileContextType | undefined>(undefined);

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
export const useProfileContext = () => {
  const context = useContext(ProfileContext);
  if (!context) {
    throw new Error("useProfileContext must be used within a ProfileProvider");
  }
  return context;
};

function Profile() {
  const savedUsername = localStorage.getItem('username');
  const savedExperience = localStorage.getItem('experience');

  const [username, setUsername] = useState(savedUsername || '–ò–≤–∞–Ω');
  const [experience, setExperience] = useState(savedExperience ? Number(savedExperience) : 150);
  const [taskStats, setTaskStats] = useState({ easy: 0, medium: 0, hard: 0 });
  const [globalStats, setGlobalStats] = useState({ completed: 0, failed: 0 });


   // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const storedTaskStats = JSON.parse(localStorage.getItem('taskStats') || '{"easy":0,"medium":0,"hard":0}');
    const storedGlobalStats = JSON.parse(localStorage.getItem('globalStats') || '{"completed":0,"failed":0}');
    setTaskStats(storedTaskStats);
    setGlobalStats(storedGlobalStats);
  }, []);

   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('username', username);
    localStorage.setItem('experience', experience.toString());
    localStorage.setItem('taskStats', JSON.stringify(taskStats));
    localStorage.setItem('globalStats', JSON.stringify(globalStats));
  }, [username, experience, taskStats, globalStats]);

  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUsername(e.target.value);
  };


  const updateTaskStats = (difficulty: 'easy' | 'medium' | 'hard') => {
    setTaskStats((prev) => {
      const updated = { ...prev, [difficulty]: prev[difficulty] + 1 };
      return updated;
    });
  };

  const updateGlobalStats = (result: 'completed' | 'failed') => {
    setGlobalStats((prev) => {
      const updated = { ...prev, [result]: prev[result] + 1 };
      return updated;
    });
  };

  return (
    <ProfileContext.Provider value={{ taskStats, globalStats, updateTaskStats, updateGlobalStats }}>
      <div style={{ padding: '1rem' }}>
        <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
        <div style={{ marginBottom: '1rem' }}>
          <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
          <input
            type="text"
            value={username}
            onChange={handleUsernameChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
          />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label>–û–ø—ã—Ç:</label>
          <p>{experience} –æ–ø—ã—Ç–∞</p>
        </div>
        <div style={{ marginTop: '2rem' }}>
          <h4>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º:</h4>
          <p>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {globalStats.completed}</p>
          <p>–õ–µ–≥–∫–∏—Ö –∑–∞–¥–∞—á: {taskStats.easy}</p>
          <p>–°—Ä–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á: {taskStats.medium}</p>
          <p>–°–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á: {taskStats.hard}</p>
          <p>‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {globalStats.failed}</p>
        </div>
      </div>
    </ProfileContext.Provider>
  );
}

export default Profile;
